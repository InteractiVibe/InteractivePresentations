const stepCards = document.querySelectorAll('.step-cardd');
        const infoBlock = document.getElementById('infoBlock');

        // Данные для каждого этапа, извлеченные из isp.txt
        const stepContents = {
            1: {
                shortTitle: 'Сопровождение объяснения',
                shortText: 'Визуализация и структурирование материала.',
                fullContent: `
                    <h3>ПРЕЗЕНТАЦИЯ КАК СОПРОВОЖДЕНИЕ ОБЪЯСНЕНИЯ УЧИТЕЛЯ ПРИ ИЗУЧЕНИИ НОВОГО МАТЕРИАЛА</h3>
                    <p><b>Цель:</b> визуализировать и структурировать объяснение преподавателя (интерактивная презентация как центральный дидактический инструмент).<br><b>Особенности разработки:</b></p>
                    <ol>
                        <li>Используйте меньше текста и максимум визуализации – схемы, анимации, инфографику.</li>
                        <li>Заменяйте готовые ответы проблемными вопросами.</li>
                        <li>Приводите реальные примеры из жизни, показывая связь теории с практикой.</li>
                        <li>Используйте знакомые цифровые паттерны (стиль, персонажей, примеры из популярных игр и кино).</li>
                    </ol>
                    <div class="example-box">
                        <p><b> Примеры:</b></p><br>
                        <ul>
                            <li>объяснение принципов работы сети Интернет через интерактивную модель с поэтапным «включением» компонентов;</li>
                            <li>при обсуждении сети Интернет провести «суд над интернетом», организовать дебаты о пользе/вреде сети с всплывающими фактами при наведении на «улики» и голосованием учащихся и вариантами аргументов для каждой стороны.</li>
                        </ul>
                    </div>
                `
            },
            2: {
                shortTitle: 'Информационно-обучающее пособие',
                shortText: 'Самостоятельное изучение темы учащимися.',
                fullContent: `
                    <h3>ИНФОРМАЦИОННО-ОБУЧАЮЩЕЕ ПОСОБИЕ</h3>
                    <p><b>Цель:</b> самостоятельное изучение темы учащимися.<br><b>Особенности разработки:</b></p>
                    <ol>
                        <li>Полнота и системность изложения.</li>
                        <li>Разветвленная навигация.</li>
                        <li>Встроенные тренажеры и симуляторы.</li>
                        <li>Глоссарий с всплывающими подсказками.</li>
                        <li>Альтернативные объяснения сложных моментов.</li>
                        <li>Система самопроверки на каждом этапе.</li>
                    </ol>
                    <div class="example-box">
                        <p><b> Примеры:</b></p><br>
                        <ul>
                            <li>история электронных вычислительных машин через интерактивную хронологию от перфокарт до голосовых помощников с мини-квестами (например, «Найди предка»), вопросами и заданиями для самопроверки и размышления;</li>
                            <li>интерактивный учебник по теме «Сетевой этикет» с основными правилами, ситуативными кейсами, анимациями, видеофрагментами и тренажерами для самопроверки.</li>
                        </ul>
                    </div>
                `
            },
            3: {
                shortTitle: 'Внеурочное занятие',
                shortText: 'Углубление знаний в неформальной обстановке.',
                fullContent: `
                    <h3>ПРЕЗЕНТАЦИЯ ДЛЯ ВНЕУРОЧНОГО ЗАНЯТИЯ</h3>
                    <p><b>Цель:</b> углубление знаний в неформальной обстановке.<br><b>Особенности разработки:</b></p>
                    <ol>
                        <li>Игровой формат.</li>
                        <li>Элементы соревнования.</li>
                        <li>Творческие задания.</li>
                        <li>Связь с реальными ИТ-профессиями.</li>
                        <li>Возможность групповой работы.</li>
                        <li>Интеграция с внешними ресурсами.</li>
                    </ol>
                    <div class="example-box">
                        <p><b> Примеры:</b></p><br>
                        <ul>
                            <li>квест «Кибердетектив» с решением задач по криптографии и информационной безопасности;</li>
                            <li>групповая или индивидуальная работа учеников по созданию слайдов с мемами по темам из информатики с пояснением использованных терминов (можно предусмотреть шаблоны с IT-атрибутикой и библиотекой терминов), в результате провести интерактивное голосование за лучшую работу.</li>
                        </ul>
                    </div>
                `
            },
            4: {
                shortTitle: 'Постановка темы',
                shortText: 'Мотивация и обозначение проблемного поля.',
                fullContent: `
                    <h3>ПРЕЗЕНТАЦИЯ ДЛЯ ПОСТАНОВКИ ТЕМЫ</h3>
                    <p><b>Цель:</b> замотивировать учащихся, вызвать интерес к новой теме, обозначить проблемное поле.<br><b>Особенности разработки:</b></p>
                    <ol>
                        <li>Использование провокационных вопросов, парадоксов.</li>
                        <li>Включение коротких видеороликов или анимаций, демонстрирующих практическую значимость темы.</li>
                        <li>Интерактивные опросы «Что вы знаете о..?».</li>
                        <li>Геймифицированные элементы (например, «разгадайте код», чтобы узнать тему урока).</li>
                        <li>Яркие визуальные метафоры, связанные с темой.</li>
                    </ol>
                    <div class="example-box">
                        <p><b> Примеры:</b></p><br>
                        <ul>
                            <li>перед переходом к теме «Методы защиты информации» разработать мини-квест, где ученики попадают в роль следователей, расследующих кибератаку, с поиском «улик» (файлы журналов, подозрительные IP); предусмотреть анимацию атаки на сервер при неправильном выборе и голосование «Кто хакер?» с визуализацией результатов;</li>
                            <li>при изучении темы «Алгоритмы» можно начать с интерактивного квеста, где нужно «спасти робота», выстроив простейшую последовательность команд.</li>
                        </ul>
                    </div>
                `
            },
            5: {
                shortTitle: 'Актуализация знаний',
                shortText: 'Систематизация ранее изученного материала.',
                fullContent: `
                    <h3>ПРЕЗЕНТАЦИЯ ДЛЯ АКТУАЛИЗАЦИИ ЗНАНИЙ</h3>
                    <p><b>Цель:</b> вспомнить и систематизировать ранее изученный материал, необходимый для освоения новой темы (кратковременное, но интенсивное взаимодействие с материалом, стимулирующее познавательную активность учащихся).<br><b>Особенности разработки:</b></p>
                    <ol>
                        <li>Интерактивные схемы «Вспомните и дополните».</li>
                        <li>Короткие тесты с автоматической проверкой или мини-опросы с мгновенной визуализацией результатов.</li>
                        <li>Создание проблемной ситуации (например, демонстрация алгоритма с преднамеренной ошибкой).</li>
                        <li>Интеллект-карты с возможностью коллективного заполнения.</li>
                        <li>Система «горячих зон» на изображениях.</li>
                    </ol>
                    <div class="example-box">
                        <p><b> Примеры:</b></p><br>
                        <ul>
                            <li>для повторения архитектуры ПК создать конструктор из компонентов компьютера – учащиеся перемещают детали в корпус, если сборка правильная, то ПК запускается, а при ошибке появляются комичные анимации (например, дым из блока питания); можно предусмотреть подсказки о функциях компонентов;</li>
                            <li>после изучения языков программирования – интерактивная временная шкала развития языков, где нужно расставить основные вехи.</li>
                        </ul>
                    </div>
                `
            },
            6: {
                shortTitle: 'Закрепление материала',
                shortText: 'Отработка и применение полученных знаний.',
                fullContent: `
                    <h3>ПРЕЗЕНТАЦИЯ ДЛЯ ЗАКРЕПЛЕНИЯ МАТЕРИАЛА</h3>
                    <p><b>Цель:</b> отработка и применение полученных знаний (интерактивная презентация как инструмент практической деятельности).<br><b>Особенности разработки:</b></p>
                    <ol>
                        <li>Практико-ориентированные кейсы.</li>
                        <li>Интерактивные упражнения с возрастающей сложностью.</li>
                        <li>Система подсказок и «стратегий решения».</li>
                        <li>Возможность многократного прохождения.</li>
                        <li>Аналитика ошибок.</li>
                    </ol>
                    <div class="example-box">
                        <p><b> Примеры:</b></p><br>
                        <ul>
                            <li>соревновательная викторина <a href="Своя игра.pptx" style="text-decoration:none; color:#ff66b2;border: 1px solid #ff66b2;border-radius:5px" title="Скачать">«Своя игра»</a> с различными категориями вопросов, которые ранжированы по уровню сложности (универсальный формат, применимый к различным темам курса информатики) – ученики объединяются в команды, выполняют задания за ограниченное количество времени и получают баллы за правильные решения;</li>
                            <li>образовательная игра-квест <a href="https://drive.google.com/file/d/1MFsOsKJic5tbapnVxMIFJynK7mjKuDts/view?usp=drive_link" style="text-decoration:none; color:#ff66b2;border: 1px solid #ff66b2;border-radius:5px" title="Скачать">«Двоичная аномалия»</a> на закрепление полученных знаний по теме «Системы счисления» – учащийся принимает на себя роль хакера из подпольного сопротивления, которому предстоит выполнить серию заданий на перевод между двоичной и десятичной системами счисления, чтобы взломать защитные механизмы корпорации-антагониста; ответы ученика приводят к сюжетным изменениям и разным концовкам.</li>
			</ul>
                    </div>
                `
            },
            7: {
                shortTitle: 'Контроль знаний',
                shortText: 'Проверка уровня усвоения материала.',
                fullContent: `
                    <h3>ПРЕЗЕНТАЦИЯ ДЛЯ КОНТРОЛЯ ЗНАНИЙ</h3>
                    <p><b>Цель:</b> проверка уровня усвоения материала.<br><b>Особенности разработки:</b></p>
                    <ol>
                        <li>Разнообразные типы заданий (выбор, сопоставление и т.п.).</li>
                        <li>Таймер и ограничения времени.</li>
                        <li>Система оценки с критериями.</li>
                        <li>Защита от списывания.</li>
                        <li>Индивидуальные варианты.</li>
                    </ol>
                    <div class="example-box">
                        <p><b> Примеры:</b></p><br>
                        <ul>
                            <li>тест по теме «Кодирование информации» без возможности произвольного перехода по слайдам и с разнообразными вариантами;</li>
                            <li>ученики должны дешифровать переписку; предусмотреть уникальные сценарии и концовки истории с соответствующим оцениванием.</li>
                        </ul>
                    </div>
                `
            },
            8: {
                shortTitle: 'Рефлексия',
                shortText: 'Осмысление и самоанализ.',
                fullContent: `
                    <h3>ПРЕЗЕНТАЦИЯ ДЛЯ РЕФЛЕКСИИ</h3>
                    <p><b>Цель:</b> осмысление изученного материала, самоанализ и оценка сформированности знаний через интерактивные формы взаимодействия.<br><b>Особенности разработки:</b></p>
                    <ol>
                        <li>Эмоционально-оценочные элементы (смайлы, шкалы, цветовые маркеры).</li>
                        <li>Визуализация прогресса (графики, диаграммы, «уровни освоения»).</li>
                        <li>Геймифицированные формы обратной связи (баллы, рейтинги).</li>
                        <li>Быстрые рефлексивные вопросы с вариантами ответов.</li>
                    </ol>
                    <div class="example-box">
                        <p><b> Примеры:</b></p><br>
                        <ul>
                            <li>«Цветовая самооценка» – ученик выбирает цвет: зеленый – «Все понял, могу объяснить», желтый – «Есть небольшие вопросы», красный – «Нужно повторить»; после выбора предлагаются подсказки, что можно сделать, чтобы улучшить результат;</li>
                            <li>«Ассоциации» – на экране выводится термин, например «алгоритм», ведется анимированный таймер (на 60 секунд), ученики по цепочке говорят ассоциации с понятием (определяется, какие связи с темой запомнились), по истечению таймера появляются анимации возможных ассоциаций;</li>
                            <li>«Шкала понимания» – ученики отмечают на шкале от 1 до 10, насколько хорошо поняли тему (в индивидуальном порядке или через взаимодействие с интерактивной доской) их оценка сопровождается подсказками («1-3» – «Нужно повторить базовые понятия», «4-7» – «Есть пробелы, но общая картина ясна», «8-10» – «Могу объяснить другим!») и анимированными либо звуковыми реакциями; после голосования предлагаются персонализированные задания для закрепления.</li>
                        </ul>
                    </div>
                `
            }
        };

        // Функция для отображения информации об этапе
        function showStepInfo(stepNumber) {
            const content = stepContents[stepNumber];
            if (content) {
                // Добавляем класс для стилизации оригинального контента
                infoBlock.innerHTML = `<div class="info-content-original">${content.fullContent}</div>`;
                
                // Удаляем класс 'active' у всех карточек
                stepCards.forEach(card => card.classList.remove('active'));
                
                // Добавляем класс 'active' к текущей карточке
                document.querySelector(`.step-cardd[data-step="${stepNumber}"]`).classList.add('active');

                // Показываем блок информации, добавляя класс 'active'
                infoBlock.classList.add('active');
            } else {
                infoBlock.innerHTML = '<h2>Информация не найдена</h2><p>Выберите этап, чтобы узнать подробности.</p>';
                infoBlock.classList.remove('active'); // Скрываем блок, если нет информации
            }
        }

        // Добавляем слушатели событий на каждую карточку этапа
        stepCards.forEach(card => {
            card.addEventListener('click', () => {
                const step = card.dataset.step; // Получаем номер этапа из data-атрибута
                showStepInfo(step); // Вызываем функцию отображения информации
            });
        });

        // Показываем информацию для первого этапа при загрузке страницы
        window.addEventListener('DOMContentLoaded', () => {
            showStepInfo(1);
        });
document.addEventListener('DOMContentLoaded', () => {
    // Checklist interactivity
    const checklistItems = document.querySelectorAll('.checklist-item');

    checklistItems.forEach(item => {
        item.addEventListener('click', () => {
            item.classList.toggle('checked');
            const isChecked = item.classList.contains('checked');
            item.setAttribute('data-checked', isChecked);
        });
    });

    // Collapsible Navigation
    const header = document.querySelector('.header');
    const heroSection = document.querySelector('.hero');
    let heroHeight = heroSection.offsetHeight; // Get initial height of hero section

    // Use a debounce function for scroll to optimize performance
    let scrollTimeout;
    window.addEventListener('scroll', () => {
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(() => {
            if (window.scrollY > heroHeight / 2) { // When scrolled past half of hero section
                header.classList.add('scrolled');
            } else {
                header.classList.remove('scrolled');
            }
        }, 50); // Debounce time in ms
    });

    // Update heroHeight if window is resized (e.g., orientation change)
    window.addEventListener('resize', () => {
        heroHeight = heroSection.offsetHeight;
        // Also trigger scroll check on resize
        if (window.scrollY > heroHeight / 2) {
            header.classList.add('scrolled');
        } else {
            header.classList.remove('scrolled');
        }
    });

    // Initial check in case user loads page already scrolled
    if (window.scrollY > heroHeight / 2) {
        header.classList.add('scrolled');
    }
});
